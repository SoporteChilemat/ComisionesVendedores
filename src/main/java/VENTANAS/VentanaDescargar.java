/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package VENTANAS;

import DAO.consultaMonitorReporte;
import static VENTANAS.VentanaLogin.nombre;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.CompletableFuture;
import javax.swing.ImageIcon;
import org.apache.commons.io.FileUtils;
import static org.apache.poi.hssf.usermodel.HeaderFooter.date;

/**
 *
 * @author sopor
 */
public class VentanaDescargar extends javax.swing.JDialog {

    /**
     * Creates new form VentanaDescargar
     */
    public VentanaDescargar(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        rSDateChooser1 = new rojeru_san.componentes.RSDateChooser();
        rSDateChooser2 = new rojeru_san.componentes.RSDateChooser();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton1.setText("Descargar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cerrar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rSDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rSDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rSDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rSDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Date datoFecha = rSDateChooser1.getDatoFecha();
        Date datoFecha2 = rSDateChooser2.getDatoFecha();

        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        String strDate = dateFormat.format(datoFecha);
        String strDate2 = dateFormat.format(datoFecha2);

        String[] split = strDate.split("/");
        String name = split[0] + split[1] + split[2];
        int parseInt = Integer.parseInt(name);

        String[] split2 = strDate2.split("/");
        String name2 = split2[0] + split2[1] + split2[2];
        int parseInt2 = Integer.parseInt(name2);

        if (parseInt < parseInt2) {

            String namex = parseInt + "@" + parseInt2;
            CompletableFuture.runAsync(() -> {
                try {
                    this.dispose();
                    
                    vd = new VentanaDescarga(VentanaPrincipal.ventanaPrincipal, false);
                    vd.setVisible(true);
                    descargarInformeCompartido(namex);

                    File file11 = new File(System.getProperty("user.dir") + "\\ventas\\PB\\SAF2_Visor_Diario_Listado_de_Ventas_x_Fechas.xls"); //catch (IOException ex) {
                    File file22 = new File(System.getProperty("user.dir") + "\\ventas\\VA\\SAF2_Visor_Diario_Listado_de_Ventas_x_Fechas.xlsx");
                    File file33 = new File(System.getProperty("user.dir") + "\\ventas\\OL\\SAF2_Visor_Diario_Listado_de_Ventas_x_Fechas.xlsx");

                    while (file11.length() == 0 || file22.length() == 0 || file33.length() == 0) {
                        Thread.sleep(1000);
                    }
                    try {
                        vd.setVisible(false);
                    } catch (Exception ex) {
                        System.out.println(ex);
                    }
                } catch (Exception ex) {

                }
            });
        } else {

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public static void descargarInformeCompartido(String fecha2) {

        eliminarFileFECHA();

        ImageIcon icon = new ImageIcon(System.getProperty("user.dir") + "\\Gif\\ok.png");

        try {
////////////////////////////////////////////////////////////////////////////////                
/////////////////////////////////// PB  ///////////////////////////////////             
////////////////////////////////////////////////////////////////////////////////     
            CompletableFuture.runAsync(() -> {
                try {
                    String respre = consultaMonitorReporte.ConsultaLocalMonitorReporte(nombre, "PB");
                    System.out.println("respre " + respre);
                    if ("".equals(respre)) {
                        consultaMonitorReporte.registraMonitorReporte(fecha2, nombre, "PB");
                    } else {
                        consultaMonitorReporte.actualizaMonitorReporte(fecha2, nombre, "PB");
                    }
////////////////////////////////////////////////////////////////////////////////
                    String respre0 = consultaMonitorReporte.ConsultaLocalReportesfecha(nombre, "PB");
                    if ("".equals(respre0)) {
                        consultaMonitorReporte.registraReportesFechaNull(nombre);
                    } else {
                        consultaMonitorReporte.actualizaReportesFecha(nombre, "PB");
                    }
////////////////////////////////////////////////////////////////////////////////
                    byte[] bytes = null;
                    int length = 0;
                    while (length == 0) {
                        try {
                            bytes = consultaMonitorReporte.ConsultaLocal("PB", "xls", nombre);
                            length = bytes.length;
                        } catch (Exception ex) {
                            length = 0;
                        }
                        System.out.println("length " + length);
                        Thread.sleep(1000);
                    }
                    VentanaDescarga.jLabel4.setIcon(icon);
                } catch (Exception ex) {

                }
            });
////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// VA  ///////////////////////////////////  
////////////////////////////////////////////////////////////////////////////////  
            CompletableFuture.runAsync(new Runnable() {
                @Override
                public void run() {
                    try {
                        String respre = consultaMonitorReporte.ConsultaLocalMonitorReporte(nombre, "VA");
                        System.out.println("respre " + respre);
                        if ("".equals(respre)) {
                            consultaMonitorReporte.registraMonitorReporte(fecha2, nombre, "VA");
                        } else {
                            consultaMonitorReporte.actualizaMonitorReporte(fecha2, nombre, "VA");
                        }
////////////////////////////////////////////////////////////////////////////////
                        String respre0 = consultaMonitorReporte.ConsultaLocalReportesfecha(nombre, "VA");
                        if ("".equals(respre0)) {
                            consultaMonitorReporte.registraReportesFechaNull(nombre);
                        } else {
                            consultaMonitorReporte.actualizaReportesFecha(nombre, "VA");
                        }
////////////////////////////////////////////////////////////////////////////////
                        byte[] bytes = null;
                        int length = 0;
                        while (length == 0) {
                            try {
                                bytes = consultaMonitorReporte.ConsultaLocal("VA", "xlsx", nombre);
                                length = bytes.length;
                            } catch (Exception ex) {
                                length = 0;
                            }
                            System.out.println("length " + length);
                            Thread.sleep(1000);
                        }
                        VentanaDescarga.jLabel5.setIcon(icon);
                    } catch (Exception ex) {

                    }
                }
            });
////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// OL  ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
            CompletableFuture.runAsync(() -> {
                try {
                    String respre = consultaMonitorReporte.ConsultaLocalMonitorReporte(nombre, "OL");
                    System.out.println("respre " + respre);
                    if ("".equals(respre)) {
                        consultaMonitorReporte.registraMonitorReporte(fecha2, nombre, "OL");
                    } else {
                        consultaMonitorReporte.actualizaMonitorReporte(fecha2, nombre, "OL");
                    }
////////////////////////////////////////////////////////////////////////////////
                    String respre0 = consultaMonitorReporte.ConsultaLocalReportesfecha(nombre, "OL");
                    if ("".equals(respre0)) {
                        consultaMonitorReporte.registraReportesFechaNull(nombre);
                    } else {
                        consultaMonitorReporte.actualizaReportesFecha(nombre, "OL");
                    }
////////////////////////////////////////////////////////////////////////////////
                    byte[] bytes = null;
                    int length = 0;
                    while (length == 0) {
                        try {
                            bytes = consultaMonitorReporte.ConsultaLocal("OL", "xlsx", nombre);
                            length = bytes.length;
                        } catch (Exception ex) {
                            length = 0;
                        }
                        System.out.println("length " + length);
                        Thread.sleep(1000);
                    }
                    VentanaDescarga.jLabel6.setIcon(icon);
                } catch (Exception ex) {

                }
            });
////////////////////////////////////////////////////////////////////////////////
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static public void eliminarFileFECHA() {
        String dir = System.getProperty("user.dir");

        File filePB = new File(dir + "\\ventas\\PB\\SAF2_Visor_Diario_Listado_de_Ventas_x_Fechas.xls");
        File fileVA = new File(dir + "\\ventas\\VA\\SAF2_Visor_Diario_Listado_de_Ventas_x_Fechas.xlsx");
        File fileOL = new File(dir + "\\ventas\\OL\\SAF2_Visor_Diario_Listado_de_Ventas_x_Fechas.xlsx");

        do {
            System.out.println("eliminarFileFECHA");
            try {
                FileUtils.forceDelete(filePB);
            } catch (Exception ex) {
                System.out.println(ex);
            }
            try {
                FileUtils.forceDelete(fileVA);
            } catch (Exception ex) {
                System.out.println(ex);
            }
            try {
                FileUtils.forceDelete(fileOL);
            } catch (Exception ex) {
                System.out.println(ex);
            }
        } while (filePB.exists() || fileVA.exists() || fileOL.exists());

        filePB = new File(dir + "\\ventas\\PB\\SAF2_Visor_Diario_Listado_de_Ventas_x_Fechas.xls");
        fileVA = new File(dir + "\\ventas\\VA\\SAF2_Visor_Diario_Listado_de_Ventas_x_Fechas.xlsx");
        fileOL = new File(dir + "\\ventas\\OL\\SAF2_Visor_Diario_Listado_de_Ventas_x_Fechas.xlsx");

        do {
            System.out.println("eliminarFileFECHA");
            try {
                FileUtils.forceDelete(filePB);
            } catch (Exception ex) {
                System.out.println(ex);
            }
            try {
                FileUtils.forceDelete(fileVA);
            } catch (Exception ex) {
                System.out.println(ex);
            }
            try {
                FileUtils.forceDelete(fileOL);
            } catch (Exception ex) {
                System.out.println(ex);
            }
        } while (filePB.exists() || fileVA.exists() || fileOL.exists());
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    public static rojeru_san.componentes.RSDateChooser rSDateChooser1;
    public static rojeru_san.componentes.RSDateChooser rSDateChooser2;
    // End of variables declaration//GEN-END:variables
    public static VentanaDescarga vd;
}
